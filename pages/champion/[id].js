import { post, championReq } from './../../utils/request';
import Head from 'next/head'
import styles from '../../styles/Champion.module.css'
import React from 'react'
import { GAME_PATH } from '../../utils/urls'
import dynamic from 'next/dynamic'
const Abilities = dynamic(() => import('../../components/champion/Abilities'));
const Skins = dynamic(() => import('../../components/champion/Skins'));
const Info = dynamic(() => import('../../components/champion/Info'));
const Header = dynamic(() => import('../../components/champion/Header'));

const Champion = ({ champion, calculatedColor }) => {
    calculatedColor.CalculatedColor = calculatedColor.CalculatedColor == "" ? "#000913" : calculatedColor.CalculatedColor;
    const imgSrc = `${GAME_PATH}champion-splashes/uncentered/${champion.id}/${champion.id}000.jpg`;
    if (champion.spells.length == 4)
        champion.spells.unshift({
            spellKey: "p",
            name: champion.passive.name,
            description: champion.passive.description,
            abilityIconPath: champion.passive.abilityIconPath,
            spellKeyLong: "passive"
        });
    return (
        <>
            <Head>
                <title>LOGGER | {champion.name}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={`relative ${styles.container}`} style={{ background: `${calculatedColor.CalculatedColor}` }}>
                <Header imgSrc={imgSrc} calculatedColor={calculatedColor.CalculatedColor}></Header>
                <Info champion={champion} calculatedColor={calculatedColor.CalculatedColor}></Info>
                <Abilities champion={champion} calculatedColor={calculatedColor.CalculatedColor}></Abilities>
                <Skins champion={champion}></Skins>
            </div>
        </>

    )
}

export async function getServerSideProps({ params }) {
    const data = await post("api/champion", { search: params.id });

    if (!data.success || data.result.length == 0)
        return {
            notFound: true,
        }
    const champion = await championReq(`/champions/${data.result[0][1].key}.json`);
    const calculatedColor = await championReq(`champion-splashes/${data.result[0][1].key}/metadata.json`);
    champion["tips"] = data.result[0][1].tips;
    champion["stats"] = data.result[0][1].stats;
    return {
        props: {
            champion,
            calculatedColor
        }
    }
}
export default Champion